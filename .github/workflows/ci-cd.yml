name: Deploy to AWS

on:
  push:
    branches:
      - main         # Deploy when changes are pushed to the main branch (Production)
      - deployment   # Deploy when changes are pushed to the deployment branch (Development)

jobs:
  deploy:
    name: Deploy Services and Infrastructure
    runs-on: ubuntu-latest

    # Environment Variables
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1  # Replace with your region if necessary.
      TF_WORKING_DIR: infrastructure

    steps:
      - name: Print all environment variables
        run: printenv
      - name: Print variables
        run: |
          echo "AWS Access Key: $AWS_ACCESS_KEY_ID ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS Region: $AWS_DEFAULT_REGION"
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Determine Environment Based on Branch
      - name: Set Environment
        id: env
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "env_name=prod" >> $GITHUB_ENV
            echo "tfvars_file=prod.tfvars" >> $GITHUB_ENV
          else
            echo "env_name=dev" >> $GITHUB_ENV
            echo "tfvars_file=dev.tfvars" >> $GITHUB_ENV
          fi

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Install dependencies for services
      - name: Install Dependencies for Services
        working-directory: services
        run: |
          cd auth-service && npm install && npm run build
          cd ../shop-service && npm install && npm run build

      # Zip Lambda functions for deployment
      - name: Package Lambda Functions
        working-directory: services
        run: |
          cd auth-service && zip -r auth-service.zip .
          mv auth-service.zip ../../infrastructure/lambda/auth-service.zip
          cd ../shop-service && zip -r shop-service.zip .
          mv shop-service.zip ../../infrastructure/lambda/shop-service.zip

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Initialize Terraform
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      # Plan Terraform changes
      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -var-file=env/${{ env.tfvars_file }}

      # Apply Terraform changes
      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve -var-file=env/${{ env.tfvars_file }}

      # Verify Deployment
      - name: Verify Deployment
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "API Gateway URL:"
          terraform output -raw api_gateway_url
